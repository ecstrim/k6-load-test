apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-scripts-v2
  namespace: prod
data:
  # Original stress test script
  stress-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Rate, Trend, Counter } from 'k6/metrics';
    import { SharedArray } from 'k6/data';

    const errorRate = new Rate('errors');
    const successRate = new Rate('success');
    const requestDuration = new Trend('request_duration');
    const totalRequests = new Counter('total_requests');

    const urls = new SharedArray('urls', function() {
      const urlData = JSON.parse(open(__ENV.URL_DATA_PATH || '/data/urls-1.json'));
      return urlData.urls;
    });

    const TARGET_RPS = parseInt(__ENV.TARGET_RPS || '50');
    const DURATION = __ENV.DURATION || '2m';
    const BASE_URL = __ENV.BASE_URL;
    const ESTIMATED_REQ_PER_VU_PER_SEC = 4;
    const CALCULATED_VUS = Math.ceil(TARGET_RPS / ESTIMATED_REQ_PER_VU_PER_SEC);

    export const options = {
      scenarios: {
        constant_rps: {
          executor: 'constant-arrival-rate',
          rate: TARGET_RPS,
          timeUnit: '1s',
          duration: DURATION,
          preAllocatedVUs: CALCULATED_VUS,
          maxVUs: Math.max(CALCULATED_VUS * 3, 20),
        },
      },
      thresholds: {
        'http_req_duration{expected_response:true}': ['p(95)<2000'],
        'errors': ['rate<0.02'],
        'http_req_failed': ['rate<0.02'],
      },
      insecureSkipTLSVerify: true,
      noConnectionReuse: false,
      userAgent: 'K6-StressTest/2.0',
    };

    export function setup() {
      console.log(`=== K6 Stress Test Configuration ===`);
      console.log(`Target RPS: ${TARGET_RPS}`);
      console.log(`Duration: ${DURATION}`);
      console.log(`Base URL: ${BASE_URL}`);
      console.log(`====================================`);
      return {
        startTime: new Date().toISOString(),
        targetRps: TARGET_RPS,
        duration: DURATION,
      };
    }

    export default function(data) {
      const urlPath = urls[Math.floor(Math.random() * urls.length)];
      const url = `${BASE_URL}${urlPath}`;

      const params = {
        headers: {
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'Accept-Encoding': 'gzip, deflate, br',
        },
        timeout: '30s',
        tags: { name: urlPath },
      };

      const response = http.get(url, params);
      totalRequests.add(1);
      requestDuration.add(response.timings.duration);

      const success = check(response, {
        'status is 200': (r) => r.status === 200,
        'response time < 2000ms': (r) => r.timings.duration < 2000,
        'response has body': (r) => r.body && r.body.length > 0,
      });

      if (success) {
        successRate.add(1);
        errorRate.add(0);
      } else {
        successRate.add(0);
        errorRate.add(1);
        console.error(`Request failed: ${url} - Status: ${response.status}`);
      }
    }

    export function teardown(data) {
      console.log(`\n=== Test Completed ===`);
      console.log(`Test end time: ${new Date().toISOString()}`);
      console.log(`======================\n`);
    }

  # Discovery script
  discover-resources.sh: |
    #!/bin/sh
    echo "=== Resource Discovery ==="
    echo "Namespace: ${NAMESPACE}"
    echo "App Label: ${APP_LABEL}"

    if kubectl get deployment -n ${NAMESPACE} -l app=${APP_LABEL} &>/dev/null; then
      echo "Deployment found: $(kubectl get deployment -n ${NAMESPACE} -l app=${APP_LABEL} -o jsonpath='{.items[0].metadata.name}')"
      REPLICA_COUNT=$(kubectl get deployment -n ${NAMESPACE} -l app=${APP_LABEL} -o jsonpath='{.items[0].spec.replicas}')
      echo "Replicas: ${REPLICA_COUNT}"
    else
      echo "No deployment found with label app=${APP_LABEL}"
    fi

    echo "=========================="

  # Metrics collection script
  collect-metrics.sh: |
    #!/bin/sh
    echo "=== Resource Metrics Collection ==="
    echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
    echo "Namespace: ${NAMESPACE}"
    echo ""

    echo "--- Deployment Pod Metrics ---"
    kubectl top pods -n ${NAMESPACE} -l app=${APP_LABEL} 2>/dev/null || echo "No pods found for app=${APP_LABEL}"

    echo ""
    echo "--- CoreDNS Metrics ---"
    kubectl top pods -n kube-system -l k8s-app=kube-dns 2>/dev/null | head -20

    echo ""
    echo "--- Ingress Controller Metrics ---"
    kubectl top pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx 2>/dev/null | head -10

    echo ""
    echo "--- Nodepool Metrics ---"
    kubectl top nodes -l agentpool 2>/dev/null || kubectl top nodes -l workload=k6 2>/dev/null || echo "No nodepool metrics"

    echo ""
    echo "--- JSON Output ---"
    echo "{"
    echo "  \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\","
    echo "  \"namespace\": \"${NAMESPACE}\","
    echo "  \"deployment_metrics\": {},"
    echo "  \"coredns_metrics\": [],"
    echo "  \"ingress_controller_metrics\": [],"
    echo "  \"nodepool_metrics\": {}"
    echo "}"

    echo ""
    echo "=== Metrics Collection Complete ==="
